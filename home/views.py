from hashlib import new
from os import path
from django.shortcuts import redirect, render
from django.views import View
from django.http import HttpResponseRedirect
from django.contrib import messages
# Create your views here.
from .forms import FileFieldForm
from .models import MalwareFile
from .utils import predict_malware_file, get_file_size
from MalwareDetection.settings import BASE_DIR
from datetime import datetime
import os
import logging
logger = logging.getLogger(__name__)


THRESHOLD_SIZE = 10 # size unit: MB

class HomeView(View):
    def __init__(self) -> None:
        self.template = 'home/index.html'
        self.domain = 'http://103.141.140.189:1307/'

    def get(self, request):
        form = FileFieldForm()
        files = list(MalwareFile.objects.all())[::-1]
        context = {
            'form': form,
            'files': files
        }       
        return render(request, template_name= self.template, context=context)

    
    def post(self, request):
        upload_file = request.FILES['myFile']
        now = datetime.now()
        dt_string = now.strftime("%d/%m/%Y_%H:%M:%S")
        title = upload_file.name
        file_size = get_file_size(upload_file)
        number_size = get_file_size(upload_file).split(' ')[0]
        if (float(number_size) > THRESHOLD_SIZE and file_size.endswith('Mb') or file_size.endswith('Gb')):
            messages.info(request, "Please choose and executed file with size under {} Mb !".format(THRESHOLD_SIZE))
            logger.debug("FAIL UPLOAD: file name: {} - size: {}".format(title, file_size))
            return HttpResponseRedirect(self.domain)
        if not title.endswith(".exe"):
            messages.info(request, "Please choose an executed file! (choose .exe)")
            logger.debug("FAIL UPLOAD: file name: {} - size: {}".format(title, file_size))
            return HttpResponseRedirect(self.domain)
        else:
            MalwareFile.objects.create(title=title, file_field=upload_file, size=file_size)
            latest_malware = MalwareFile.objects.latest('id')
            malware_file_name = os.path.join(BASE_DIR , latest_malware.file_field.name)
            try:
                result_dict = predict_malware_file(malware_file_name)    
                latest_malware.result = result_dict['values']
                latest_malware.save()
                logger.debug("SUCCESSFULL UPLOAD: time: {} - file name: {} - size: {} - result: {}".format(latest_malware.date.strftime("%Y-%m-%d %H:%M:%S"), title, file_size, result_dict))
                return redirect('home-view')
            except:
                latest_malware.result = "UNKNOWN"
                latest_malware.save()
                messages.info(request, "That file is not PE file!")
                logger.debug("FAIL UPLOAD (not PE file): file name: {} - size: {} - result: {}".format(title, file_size, "UNKNOWN"))
                return redirect('home-view')
        